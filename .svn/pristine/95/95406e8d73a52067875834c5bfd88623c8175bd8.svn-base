<?php

namespace app\index\controller;

use app\index\model\Car;
use app\index\model\Customer;
use app\index\model\Msg;
use app\index\model\User as U;
use think\Db;
use think\Validate;

class User extends Common
{
    /**
     * 客户会员卡支付
     */
    public function pay()
    {
        $data = $this->request->param();
        $validate = new Validate(
            [
                'money' => 'require|number',
                'payPwd' => 'require',
                'shopID' => 'require|integer',
                'customerID' => 'require|integer'
            ],
            [
                'money.require' => '请输入金额',
                'money.number' => '金额必须是数字',
                'payPwd.require' => '用户密码缺失'
            ]
        );
        if ($validate->check($data)) {
            $user = new U($data['customerID']);
            $ret = $user->pay($data['money'], $data['payPwd'], $data['shopID']);
            $ret = Msg::getMsg($ret);
        } else {
            $ret = Msg::getMsg(['code' => 401, 'msg' => $validate->getError()]);
        }
        pJson($ret);
    }

    /**
     * 给客户设置支付密码
     */
    public function setPwd()
    {
        $data = $this->request->param();
        $validate = new Validate(
            [
                'customerID' => 'require|integer',
                'payPwd' => 'require|number|length:6'
            ],
            [
                'payPwd.length' => '密码长度必须为6位',
                'payPwd.number' => '密码必须是数组'
            ]
        );
        if ($validate->check($data)) {
            $customer = Customer::get($data['customerID']);
            $ret = $customer->setPwd($data['payPwd']);
        } else {
            $ret = Msg::getMsg(['code' => 402, 'msg' => $validate->getError()]);
        }
        pJson($ret);
    }

    /**
     * 检查是否设置密码
     */
    public function checkPwdSet()
    {
        $data = $this->request->param();
        $validate = new Validate(
            [
                'customerID' => 'require|integer'
            ]
        );
        if ($validate->check($data)) {
            $customer = Customer::get(['coustomid' => $data['customerID']]);
            if ($customer->isSetPwd()) {
                $ret['isSet'] = 1;
            } else {
                $ret['isSet'] = 0;
            }
            $ret['code'] = 200;
            $ret = Msg::getMsg($ret);
        } else {
            $ret = Msg::getMsg(['code' => 402, 'msg' => $validate->getError()]);
        }
        pJson($ret);
    }

    /**
     * 客户绑定车牌号码
     */
    public function bindCarNum()
    {
        $data = $this->request->param();
        $validate = new Validate(
            [
                'customerID' => 'require|integer',
                'carNum' => 'require'
            ],
            [
                'carNum.require' => "必须输入车牌信息！"
            ]
        );
        if ($validate->check($data)) {
            $carCheck = Car::get(['carNum' => $data['carNum']])->getAttr('id');
            if (isset($carCheck)) {
                $ret = Msg::getMsg(804);
            } else {
                $saveData['coustomID'] = $data['customerID'];
                $saveData['carNum'] = $data['carNum'];
                $car = new Car();
                $car->data($saveData);
                $ret = Msg::getMsg(['code' => 200]);
            }

        } else {
            $ret = Msg::getMsg(['code' => 402, 'msg' => $validate->getError()]);
        }
        pJson($ret);
    }

    /**
     * 检查是否已经绑定车牌
     */
    public function checkCarNum()
    {
        $data = $this->request->param();
        $validate = new Validate(
            [
                'customerID' => 'require|integer'
            ]
        );
        if ($validate->check($data)) {
            $car = Car::get(['coustomID' => $data['customerID'], 'state' => 1])->getAttr('id');
            if (isset($car)) {
                $isCar['isCar'] = 1;
            } else {
                $isCar['isCar'] = 0;
            }
            $isCar['code'] = 200;
            $ret = Msg::getMsg($isCar);
        } else {
            $ret = Msg::getMsg(['code' => 402, 'msg' => $validate->getError()]);
        }
        pJson($ret);
    }

    /**
     * 获取用户信息
     */
    public function getInfo()
    {
        $data = $this->request->param();
        $validate = new Validate(
            [
                'customerID' => 'require|integer'
            ]
        );
        if ($validate->check($data)) {
            $dataRet = [];
            $customer = Customer::get(['coustomid' => $data['customerID']])->getAttr('tel');
            $car = Car::get(['coustomID' => $data['customerID']])->getAttr('carNum');
            $user = new U($data['customerID']);
            $balance = $user->getBalance();
            $dataRet['tel'] = $customer;
            $dataRet['carNum'] = $car;
            $dataRet['balance'] = $balance;
            $ret = Msg::getMsg(['code' => 200, 'info' => $dataRet]);
        } else {
            $ret = Msg::getMsg(['code' => 402, 'msg' => $validate->getError()]);
        }
        pJson($ret);
    }

    /**
     * 获取支付订单记录列表
     */
    public function getPayOrder()
    {
        $data = $this->request->param();
        $validate = new Validate(
            [
                'customerID' => 'require|integer',
                'page' => 'require|integer'
            ]
        );
        if ($validate->check($data)) {
            $start = $data['page'] * PER_NUM;
            $orderData = Db::query('select o.consumeOrderNum,o.createTime,o.consumeQuota,s.shopname from mc_consume_order o JOIN ' . JFYCARLIFE . '.sh_shop s ON o.shopID = s.shopid where o.customerID=:id limit ' . $start . ',' . PER_NUM, ['id' => $data['customerID']]);
            $ret = Msg::getMsg(['code' => 200, 'data' =>$orderData]);
        } else {
            $ret = Msg::getMsg(['code' => 402, 'msg' => $validate->getError()]);
        }
        pJson($ret);
    }

    /**
     * 获取充值订单列表
     */
    public function getBuyOrder()
    {
        $data = $this->request->param();
        $validate = new Validate(
            [
                'customerID' => 'require|integer',
                'page' => 'require|integer'
            ]
        );
        if ($validate->check($data)) {
            $start = $data['page'] * PER_NUM;
            $orderData = Db::query('SELECT i.`name`,o.cardOrderNum,o.createTime,o.quota,m.payMethodName,o.paid FROM mc_card_info i JOIN mc_card_order o ON i.orderID = o.cardOrderID AND i.customerID=:id JOIN jfycarlifetest.sh_shop s ON i.shopID = s.shopid JOIN mc_pay_method m ON o.payType = m.id  limit ' . $start . ',' . PER_NUM, ['id' => $data['customerID']]);
            $ret = Msg::getMsg(['code' => 200, 'data' =>$orderData]);
        }else{
            $ret = Msg::getMsg(['code' => 402, 'msg' => $validate->getError()]);
        }
        pJson($ret);
    }


}
